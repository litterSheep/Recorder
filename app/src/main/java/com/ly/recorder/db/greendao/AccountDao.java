package com.ly.recorder.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ly.recorder.db.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Year = new Property(1, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, int.class, "month", false, "MONTH");
        public final static Property Breakfast = new Property(3, float.class, "breakfast", false, "BREAKFAST");
        public final static Property Lunch = new Property(4, float.class, "lunch", false, "LUNCH");
        public final static Property Dinner = new Property(5, float.class, "dinner", false, "DINNER");
        public final static Property Other = new Property(6, float.class, "other", false, "OTHER");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Time = new Property(8, long.class, "time", false, "TIME");
    }


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"YEAR\" INTEGER NOT NULL ," + // 1: year
                "\"MONTH\" INTEGER NOT NULL ," + // 2: month
                "\"BREAKFAST\" REAL NOT NULL ," + // 3: breakfast
                "\"LUNCH\" REAL NOT NULL ," + // 4: lunch
                "\"DINNER\" REAL NOT NULL ," + // 5: dinner
                "\"OTHER\" REAL NOT NULL ," + // 6: other
                "\"REMARK\" TEXT," + // 7: remark
                "\"TIME\" INTEGER NOT NULL );"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindDouble(4, entity.getBreakfast());
        stmt.bindDouble(5, entity.getLunch());
        stmt.bindDouble(6, entity.getDinner());
        stmt.bindDouble(7, entity.getOther());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindDouble(4, entity.getBreakfast());
        stmt.bindDouble(5, entity.getLunch());
        stmt.bindDouble(6, entity.getDinner());
        stmt.bindDouble(7, entity.getOther());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // year
            cursor.getInt(offset + 2), // month
            cursor.getFloat(offset + 3), // breakfast
            cursor.getFloat(offset + 4), // lunch
            cursor.getFloat(offset + 5), // dinner
            cursor.getFloat(offset + 6), // other
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.getLong(offset + 8) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.getInt(offset + 1));
        entity.setMonth(cursor.getInt(offset + 2));
        entity.setBreakfast(cursor.getFloat(offset + 3));
        entity.setLunch(cursor.getFloat(offset + 4));
        entity.setDinner(cursor.getFloat(offset + 5));
        entity.setOther(cursor.getFloat(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
